{
    "char": {
        "changeName": {
            "alias": ["changeName"],
            "name": "changeName",
            "code": "changeName(name);",
            "single": true,
            "type": "Setter",
            "desc": "Changes the display name of the character",
            "arg": [{
                "name": "name",
                "alias": ["name"],
                "type": "string",
                "desc": "Name of to be displayed as speaking for the character",
                "accepted": {
                    "string": "Any string to be displayed as name. Eg: John Smith, Kami-sama",
                    "none": "Will not display the name box",
                    "def": "Will not display the name box",
                    "null/undefined": "character's default name during construction"
                }
            }]
        },
        "complete": {
            "alias": ["complete"],
            "name": "complete",
            "code": "complete();",
            "single": false,
            "type": "Chain Constructor",
            "desc": "Marks the completion of the character during construction. All values set by chain constructors, setters or pre-anim prior to this method call will be set as the character's default values. When calling settings and animations, if the parameter is undefined or null, it will assume to animate to/set to these default values",
            "arg": []
        },
        "setCustomDirectory": {
            "alias": ["setCustomDirectory", "setDir"],
            "name": "setCustomDirectory",
            "code": "setCustomDirectory(directory);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the default sprite directory to any directory (can be CDN or URL)",
            "arg": [{
                "name": "directory",
                "alias": ["dir", "directory"],
                "type": "URL",
                "desc": "Directory which contains the sprite for this character. Can be online URL.",
                "accepted": {
                    "string": "directory to point to",
                    "def/null/undefined": "character folder in images in kvn folder"
                }
            }]
        },
        "setDefaultSkippable": {
            "alias": ["setDefSkip", "setDefaultSkippable"],
            "name": "setDefaultSkippable",
            "code": "setDefaultSkippable(skip);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Boolean value. Changes whether character animation can be skipped by default (when animation does not specify the animation skip-ability). ",
            "arg": [{
                "name": "skip",
                "alias": ["skip"],
                "type": "boolean",
                "desc": "By default, whether the character's animations can be skipped (if the skip argument is not supplied)",
                "accepted": {
                    "true": "Character's animation can be skipped unless specified at animation level. This does not affect for \"wait\" method",
                    "false": "Character's animations cannot be skipped unless the specified at animation level.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "Makes the character animation skip-able unless specified at animation level"
                }
            }]
        },
        "setPreSpeakScale": {
            "alias": ["setPreSpeakScale"],
            "name": "setPreSpeakScale",
            "code": "setPreSpeakScale(scale);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the default value for the 'preSpeak' method for scaling the character",
            "arg": [{
                "name": "scale",
                "alias": ["scale"],
                "type": "+number",
                "desc": "The factor to scale by before the character speaks using the preSpeak method.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1.05"
                }
            }]
        },
        "setPreSpeakTime": {
            "alias": ["setPreSpeakTime"],
            "name": "setPreSpeakTime",
            "code": "setPreSpeakTime(time);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Set the default time taken for the 'preSpeak' method to scale the character to prepare for speech",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "The amount of time in milliseconds the character take to scale when using the preSpeak method.",
                "accepted": {
                    "number": "Any non negative integer. Zero would make it instant. Eg: 100 (0.1s), 2000 (2s)",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "200"
                }
            }]
        },
        "setDefaultAnimationInterpolation": {
            "alias": ["setDefEase", "setDefGraph", "setDefaultAnimationInterpolation"],
            "name": "setDefaultAnimationInterpolation",
            "code": "setDefaultAnimationInterpolation(graph);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "The default animation interpolation graph (easing) the character uses for all its animation if the animation did not specify.",
            "arg": [{
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }]
        },
        "addSprite": {
            "alias": ["addSprite"],
            "name": "addSprite",
            "code": "addSprite(spriteName,spritePath);",
            "single": false,
            "type": "Chain Constructor",
            "desc": "Adds a sprite to the character. The name of the sprite would be refered to when changing Sprites",
            "arg": [{
                "name": "spriteName",
                "alias": ["name", "spriteName"],
                "type": "string",
                "desc": "The name of the sprite.",
                "accepted": {
                    "string": "Any string. Preferable without spaces or special character. Eg: sad, smile_speak"
                }
            }, {
                "name": "spritePath",
                "alias": ["path", "sprite", "spritePath"],
                "type": "URL",
                "desc": "The path to the sprite (image). Do include file extension. The default image folder is \"images/char\". Sprites links can include relative resource locations. ",
                "accepted": {
                    "string": "Any legit URL that points to an image within the folder (or preset directory). Eg: sophie.png, chelsea/cry.png"
                }
            }]
        },
        "setFontSize": {
            "alias": ["setFontSize", "setTextSize"],
            "name": "setFontSize",
            "code": "setFontSize(fontSize);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets font size of the character. The units can be in em, %, px, vh or vw. The recommended unit to use is vw",
            "arg": [{
                "name": "fontSize",
                "alias": ["fontSize", "fs", "textSize"],
                "type": "font-size",
                "desc": "The font size when the character speaks.",
                "accepted": {
                    "html units": "Any number with a html unit. Eg: 1.5vw, 20px, 5vh, 7%, 8.33em.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1.5vw"
                }
            }]
        },
        "setBold": {
            "alias": ["setBold"],
            "name": "setBold",
            "code": "setBold();",
            "single": false,
            "type": "Chain Constructor",
            "desc": "Makes the character's text bold",
            "arg": []
        },
        "setItalic": {
            "alias": ["setItalic"],
            "name": "setItalic",
            "code": "setItalic();",
            "single": false,
            "type": "Chain Constructor",
            "desc": "Makes the character's text italics",
            "arg": []
        },
        "editBold": {
            "alias": ["editBold"],
            "name": "editBold",
            "code": "editBold(bold);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Change's the character bold status.",
            "arg": [{
                "name": "bold",
                "alias": ["bold"],
                "type": "boolean",
                "desc": "Whether the character's text will be bold.",
                "accepted": {
                    "true": "Character text will be bold",
                    "false": "Character text will not be bold",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "false"
                }
            }]
        },
        "editIatlic": {
            "alias": ["editIatlic"],
            "name": "editIatlic",
            "code": "editIatlic(italic);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Change's the character italic status.",
            "arg": [{
                "name": "italic",
                "alias": ["italic"],
                "type": "boolean",
                "desc": "Whether the character's text will be italic.",
                "accepted": {
                    "true": "Character text will be italic",
                    "false": "Character text will not be italic",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "false"
                }
            }]
        },
        "setTextColor": {
            "alias": ["setFontColor", "setTextColor"],
            "name": "setTextColor",
            "code": "setTextColor(color);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the character's text color when he/she/it speaks",
            "arg": [{
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Character's text/font color. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "black"
                }
            }]
        },
        "setOpacity": {
            "alias": ["setAlpha", "setOpacity"],
            "name": "setOpacity",
            "code": "setOpacity(opacity);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the opacity of the character.",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of the character.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setAnchorX": {
            "alias": ["setAX", "setAnchorX"],
            "name": "setAnchorX",
            "code": "setAnchorX(anchorX);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the horizontal (or X) anchor of the character. Do note that the character will move when animated to adjust to its new anchor",
            "arg": [{
                "name": "anchorX",
                "alias": ["aX", "anchorX", "originX", "x", "xOrigin"],
                "type": "number",
                "desc": "The X or Horizontal Anchor of the Character. See alignment and anchoring.",
                "accepted": {
                    "number": "Any number between 0 and 100, where 0 will be the extreme left and 100 will be the extreme right. 50 would be the horizontal center of the Character.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setAnchorY": {
            "alias": ["setAY", "setAnchorY"],
            "name": "setAnchorY",
            "code": "setAnchorY(anchorY);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the vertical (or Y) anchor of the charcater. Do note that the character will move when aniamted to adjust to its new anchor",
            "arg": [{
                "name": "anchorY",
                "alias": ["aY", "anchorY", "originY", "y", "yOrigin"],
                "type": "number",
                "desc": "The Y or Vertical Anchor of the Character. See alignment and anchoring.",
                "accepted": {
                    "number": "Any number between 0 and 100, where 0 will be the extreme top and 100 will be the extreme bottom. 50 would be the vertical center of the Character.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setHorizontalAlign": {
            "alias": ["setHAlign", "setHorizontalAlign", "setXAlign"],
            "name": "setHorizontalAlign",
            "code": "setHorizontalAlign(xAlign);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the horizontal (or X) alignment of the character. Do note that the character will move when animated to adjust to its new alignment",
            "arg": [{
                "name": "xAlign",
                "alias": ["alignX", "hAlign", "horizontalAlign", "x", "xAlign"],
                "type": "number",
                "desc": "The horizontal alignment of the Character. See alignment and anchoring.",
                "accepted": {
                    "number": "Any number between 0 and 100, where 0 will be the extreme left of the screen and  100 will be the extreme right. 50 would be the horizontal center of the VN Screen.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setVerticalAlign": {
            "alias": ["setVAlign", "setVerticalAlign", "setYAlign"],
            "name": "setVerticalAlign",
            "code": "setVerticalAlign(yAlign);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the vertical (or Y) alignment of the character. Do note that the character will move when animated to adjust to its new alignment",
            "arg": [{
                "name": "yAlign",
                "alias": ["alignY", "vAlign", "verticalAlign", "y", "yAlign"],
                "type": "number",
                "desc": "The vertical alignment of the Character. See alignment and anchoring.",
                "accepted": {
                    "number": "Any number between 0 and 100, where 0 will be the extreme top of the screen and  100 will be the extreme bottom. 50 would be the vertical center of the VN Screen.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setXOffSet": {
            "alias": ["setX", "setXOffSet"],
            "name": "setXOffSet",
            "code": "setXOffSet(x);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the charcater's horizontal offset from the origin of the screen that the character is aligned to.",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xOffset", "xPos"],
                "type": "number",
                "desc": "The horizontal (or x) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen width. Ie 5 is 5% of the VN Engine Screen width to the right, whereas -8.55 is -8.55% of the VN Engine Screen width to the left. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }]
        },
        "setYOffSet": {
            "alias": ["setY", "setYOffSet"],
            "name": "setYOffSet",
            "code": "setYOffSet(y);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the character's vertical offset from the origin of the screen that the characted is aligned to.",
            "arg": [{
                "name": "y",
                "alias": ["top", "y", "yOffset", "yPos"],
                "type": "number",
                "desc": "The vertical (or y) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen height. Ie 5 is 5% of the VN Engine Screen height downwards, whereas -8.55 is -8.55% of the VN Engine Screen height upwards. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }]
        },
        "setHorizontalFlip": {
            "alias": ["setHFlip", "setHorizontalFlip", "setXFlip"],
            "name": "setHorizontalFlip",
            "code": "setHorizontalFlip(hflip);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the character's horizontal flip status.",
            "arg": [{
                "name": "hflip",
                "alias": ["hflip", "horizontalFlip"],
                "type": "boolean",
                "desc": "Whether the character is flipped horizontally (along the y axis, on the x axis)",
                "accepted": {
                    "true": "The character is flipped horizontally",
                    "false": "The character is not flipped horizontally",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "The character is not flipped horizontally"
                }
            }]
        },
        "setVerticalFlip": {
            "alias": ["setVFlip", "setVerticalFlip", "setYFlip"],
            "name": "setVerticalFlip",
            "code": "setVerticalFlip(vflip);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the character's vertical flip status",
            "arg": [{
                "name": "vflip",
                "alias": ["verticalFlip", "vflip"],
                "type": "boolean",
                "desc": "Whether the character is flipped vertically (along the x axis, on the y axis)",
                "accepted": {
                    "true": "The character is flipped vertically",
                    "false": "The character is not flipped vertically",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "The character is not flipped vertically"
                }
            }]
        },
        "setWidth": {
            "alias": ["setWidth"],
            "name": "setWidth",
            "code": "setWidth(width);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the character's width. This is relative to the VN Screen Width*",
            "arg": [{
                "name": "width",
                "alias": ["w", "width"],
                "type": "!0+number",
                "desc": "The width the character. This is in percentage of the screen width*.",
                "accepted": {
                    "number": "Non-negative, non-zero number. Eg: 5, 75.5",
                    "null/undefined/def": "Reset this value to prior to .complete() call for the character. See character-defaults"
                }
            }]
        },
        "setHeight": {
            "alias": ["setHeight"],
            "name": "setHeight",
            "code": "setHeight(height);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the character's height. This is relative to the VN Screen width** ",
            "arg": [{
                "name": "height",
                "alias": ["h", "height"],
                "type": "!0+number",
                "desc": "The height the character. This is in percentage of the screen width* (To be able to preserve aspect ratio).",
                "accepted": {
                    "number": "Non-negative, non-zero number. Eg: 5, 75.5",
                    "null/undefined/def": "Reset this value to prior to .complete() call for the character. See character-defaults"
                }
            }]
        },
        "setInvert": {
            "alias": ["setInvert"],
            "name": "setInvert",
            "code": "setInvert(invert);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Set how invert the colors of the character is",
            "arg": [{
                "name": "invert",
                "alias": ["f", "filter", "invert", "negative"],
                "type": "float",
                "desc": "How negative the character color is, where 0 is no negative filter and 1 iis when the character is compeletely inverted. At 0.5, the character will be completely grey.",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setSepia": {
            "alias": ["setSepia"],
            "name": "setSepia",
            "code": "setSepia(sepia);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Set how sepia the colors of the character is",
            "arg": [{
                "name": "sepia",
                "alias": ["f", "filter", "sepia"],
                "type": "float",
                "desc": "How sepia the character is, where 0 is no sepia filter and 1 is maximum sepia filter",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setBlur": {
            "alias": ["setBlur"],
            "name": "setBlur",
            "code": "setBlur(blur);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Set how blur the character is",
            "arg": [{
                "name": "blur",
                "alias": ["blur", "f", "filter"],
                "type": "float",
                "desc": "How blur the character is, where at 0 the character is clear and 1 is very blur. You can exceed the value 1 but its is not recommended",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setGrayscale": {
            "alias": ["setGrayscale"],
            "name": "setGrayscale",
            "code": "setGrayscale(grayscale);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Set how close to black and white the character colors are. Grayscaling.",
            "arg": [{
                "name": "grayscale",
                "alias": ["filter", "gray", "grayscale"],
                "type": "float",
                "desc": "How close to black and white (grayscale) the character is. 1 is fully gray-scaled.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setContrast": {
            "alias": ["setContrast"],
            "name": "setContrast",
            "code": "setContrast(contrast);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the contrast of the charcater",
            "arg": [{
                "name": "contrast",
                "alias": ["contrast", "f", "filter"],
                "type": "float",
                "desc": "How much contrast to apply to the character is, where 1 is normal, values between 0-1 will decrease contrast while values above 1 will increase the contrast",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1"
                }
            }]
        },
        "setStarutaion": {
            "alias": ["setSaturate", "setStarutaion"],
            "name": "setStarutaion",
            "code": "setStarutaion(saturation);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the color saturation of the character",
            "arg": [{
                "name": "saturation",
                "alias": ["f", "filter", "saturate", "saturation"],
                "type": "float",
                "desc": "How saturated the character is, where 1 is no saturation. Sub 1 is undersaturation and values above one will increase the saturation.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1"
                }
            }]
        },
        "setBrightness": {
            "alias": ["setBrightness"],
            "name": "setBrightness",
            "code": "setBrightness(brightness);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the brightness of the character (color)",
            "arg": [{
                "name": "brightness",
                "alias": ["bright", "brightness", "f", "filter"],
                "type": "float",
                "desc": "How bright the character is, where 1 is the normal brightness. Sub 1 is darken the character and values above one will increase the character brightness.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1"
                }
            }]
        },
        "setHueRotation": {
            "alias": ["setHueRotation"],
            "name": "setHueRotation",
            "code": "setHueRotation(angle);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the hue of the character by rotating them by a set angle",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "f", "filter", "rotate", "rotation"],
                "type": "degree",
                "desc": "Hue rotation of the character is.",
                "accepted": {
                    "degree": "Any degree between 0-360. Larger or smaller values will loop back.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setRotation": {
            "alias": ["setRotation"],
            "name": "setRotation",
            "code": "setRotation(angle);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the rotation of the character, clockwise.",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the character clockwise in degrees",
                "accepted": {
                    "degree": "Any number between 0-360. Larger or smaller values will loop back.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setXSkew": {
            "alias": ["setXSkew"],
            "name": "setXSkew",
            "code": "setXSkew(xSkew);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the horizontal skew applied to the character.",
            "arg": [{
                "name": "xSkew",
                "alias": ["angleX", "skewX", "x", "xSkew"],
                "type": "degree",
                "desc": "How many degrees the character is skewed horizontally",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setYSkew": {
            "alias": ["setYSkew"],
            "name": "setYSkew",
            "code": "setYSkew(ySkew);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust he vertical skew applied to the character.",
            "arg": [{
                "name": "ySkew",
                "alias": ["angleY", "skewY", "y", "ySkew"],
                "type": "degree",
                "desc": "How many degrees the character is skewed vertically",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }]
        },
        "setNormalText": {
            "alias": ["resetFont", "resetText", "setNormalText"],
            "name": "setNormalText",
            "code": "setNormalText();",
            "single": false,
            "type": "Setter",
            "desc": "Resets the font of the character back to default",
            "arg": []
        },
        "changeBold": {
            "alias": ["changeBold"],
            "name": "changeBold",
            "code": "changeBold(bold);",
            "single": true,
            "type": "Setter",
            "desc": "Change the chaaracter's bold status for its speaking text",
            "arg": [{
                "name": "bold",
                "alias": ["bold"],
                "type": "boolean",
                "desc": "Whether the character's text will be bold.",
                "accepted": {
                    "true": "Character text will be bold",
                    "false": "Character text will not be bold",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "false"
                }
            }]
        },
        "changeItalic": {
            "alias": ["changeItalic"],
            "name": "changeItalic",
            "code": "changeItalic(italic);",
            "single": true,
            "type": "Setter",
            "desc": "Change the character's italic status for its speaking text",
            "arg": [{
                "name": "italic",
                "alias": ["italic"],
                "type": "boolean",
                "desc": "Whether the character's text will be italic.",
                "accepted": {
                    "true": "Character text will be italic",
                    "false": "Character text will not be italic",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "false"
                }
            }]
        },
        "resetValues": {
            "alias": ["resetVal", "resetValues"],
            "name": "resetValues",
            "code": "resetValues();",
            "single": false,
            "type": "Setter",
            "desc": "Resets the character value back to default",
            "arg": []
        },
        "preScale": {
            "alias": ["preScale"],
            "name": "preScale",
            "code": "preScale(scaleX,scaleY);",
            "single": false,
            "type": "Pre Animations",
            "desc": "Scales the character but does not animate it, yet. Values will be applied on next animation.",
            "arg": [{
                "name": "scaleX",
                "alias": ["scaleX", "w", "width", "x", "xScale"],
                "type": "+number",
                "desc": "The factor to scale horizontally (width) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original width of character",
                    "def": "1.2"
                }
            }, {
                "name": "scaleY",
                "alias": ["h", "height", "scaleY", "y", "yScale"],
                "type": "+number",
                "desc": "The factor to scale vertically (height) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original height of character",
                    "def": "1.2"
                }
            }]
        },
        "preMove": {
            "alias": ["preMove"],
            "name": "preMove",
            "code": "preMove(x,y);",
            "single": false,
            "type": "Pre Animations",
            "desc": "Moves the character but does not animate it yet. Values will be applied on next animation.",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xPos"],
                "type": "number",
                "desc": "The amount to move the character horizontally by. This is in percentage of the VN screen width. Positive is to the right where as negative is to the left.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def/null/undefined": "Original x position of the character"
                }
            }, {
                "name": "y",
                "alias": ["top", "y", "yPos"],
                "type": "number",
                "desc": "The amount to move the character vertically by. This is in percentage of the VN screen height. Positive is downwards where as negative is upwards.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def/null/undefined": "Original y position of the character"
                }
            }]
        },
        "preRotate": {
            "alias": ["preRotate"],
            "name": "preRotate",
            "code": "preRotate(angle);",
            "single": true,
            "type": "Pre Animations",
            "desc": "Rotate the charcater from the current position but does not animate it yet. Values will be applied on next animation.",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the character clockwise in degrees. Only positive numbers",
                "accepted": {
                    "degree": "Any number between 0-360. Larger values will loop back.",
                    "null/undefined": "Rotates the character back to normal.",
                    "def": "45"
                }
            }]
        },
        "preSkew": {
            "alias": ["preSkew"],
            "name": "preSkew",
            "code": "preSkew(xSkew,ySkew);",
            "single": false,
            "type": "Pre Animations",
            "desc": "Skew character from the current position but does not animate it yet. Values will be applied on next animation.",
            "arg": [{
                "name": "xSkew",
                "alias": ["angleX", "skewX", "x", "xSkew"],
                "type": "degree",
                "desc": "How many degrees the character is skewed horizontally",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Unskews the character back to normal.",
                    "def": "45"
                }
            }, {
                "name": "ySkew",
                "alias": ["angleY", "skewY", "y", "ySkew"],
                "type": "degree",
                "desc": "How many degrees the character is skewed vertically",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Unskews the character back to normal.",
                    "def": "45"
                }
            }]
        },
        "changeSprite": {
            "alias": ["changeSprite"],
            "name": "changeSprite",
            "code": "changeSprite(spriteName,promise);",
            "single": true,
            "type": "Instants",
            "desc": "Changes the sprite of the character",
            "arg": [{
                "name": "spriteName",
                "alias": ["name", "spriteName"],
                "type": "string",
                "desc": "The name of the sprite.",
                "accepted": {
                    "string": "Any string. Preferable without spaces or special character. Eg: sad, smile_speak"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "bringToFront": {
            "alias": ["bringToFront"],
            "name": "bringToFront",
            "code": "bringToFront(promise);",
            "single": false,
            "type": "Instants",
            "desc": "Instantly brings the character to the front (will not be covered by other character on the same spot) within its overlay layer. This means that if its under the overlay and character A is above overlay, bringing this character to the front would not bring it infront of character A. ",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "sendToBack": {
            "alias": ["sendToBack"],
            "name": "sendToBack",
            "code": "sendToBack(promise);",
            "single": false,
            "type": "Instants",
            "desc": "Instantly brings the character to the back (will be covered by all other character on the same spot) within its overlay layer. This means that if its over the overlay and character A is under overlay, bringing this character to the back would not bring it behind of character A. ",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "bringAboveOverlay": {
            "alias": ["bringAboveOverlay"],
            "name": "bringAboveOverlay",
            "code": "bringAboveOverlay(promise);",
            "single": false,
            "type": "Instants",
            "desc": "Instantly brings the character to above the overlay layer. Characters will preserve their relative front-back position to other characters within the same overlay layer, but a character above the overlay will always be infront of a character behind the overlay. ",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "bringBelowOverlay": {
            "alias": ["bringBelowOverlay"],
            "name": "bringBelowOverlay",
            "code": "bringBelowOverlay(promise);",
            "single": false,
            "type": "Instants",
            "desc": "Instantly brings the character to below the overlay layer. Characters will preserve their relative front-back position to other characters within the same overlay layer, but a character above the overlay will always be infront of a character behind the overlay. ",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "speak": {
            "alias": ["say", "speak"],
            "name": "speak",
            "code": "speak(text,promise,time,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Make the character open the text box and say stuff. It will use the character's current name as the name. Do note that this will clear whatever text there are in the current textbox (if it is completed displaying) and be ignored if the current textbox is still animating its text. ",
            "arg": [{
                "name": "text",
                "alias": ["msg", "text"],
                "type": "string",
                "desc": "The text the character will say.",
                "accepted": {
                    "string": "Any valid string. Do note that if it is too long it will clip out of the text box"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "Time taken for the character to say finish the sentence in milliseconds. If this number is too low, it will revert to 10ms between each character.",
                "accepted": {
                    "number": "Any non-zero positive integer. This is the number of milliseconds.",
                    "def/null/undefined": "each character will appear every 20 milliseconds (normal scrolling speed)"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "contSpeaking": {
            "alias": ["cont", "contSay", "contSpeak", "contSpeaking"],
            "name": "contSpeaking",
            "code": "contSpeaking(text,promise,time,skip,newLine,appendSpace);",
            "single": false,
            "type": "Animation",
            "desc": "This method is exactly same as the speak method ,except it does not clear the textbox before display its own text. ",
            "arg": [{
                "name": "text",
                "alias": ["msg", "text"],
                "type": "string",
                "desc": "The text the character will say.",
                "accepted": {
                    "string": "Any valid string. Do note that if it is too long it will clip out of the text box"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "Time taken for the character to say finish the sentence in milliseconds. If this number is too low, it will revert to 10ms between each character.",
                "accepted": {
                    "number": "Any non-zero positive integer. This is the number of milliseconds.",
                    "def/null/undefined": "each character will appear every 20 milliseconds (normal scrolling speed)"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "newLine",
                "alias": ["br", "linebreak", "ln", "newLine", "nl"],
                "type": "boolean",
                "desc": "When continue speaking, whether the text appears on a new line.",
                "accepted": {
                    "true": "text appears on a new line",
                    "false": "text appears on the same line as the previous text",
                    "null/def/undefined": "text appears on the same line as previous text"
                }
            }, {
                "name": "appendSpace",
                "alias": ["append", "appendSpace", "space"],
                "type": "boolean",
                "desc": "When continue speaking, whether to add a space before displaying the text. Default is true. ( will add space by default)",
                "accepted": {
                    "true": "prepends a space before displaying the text. ",
                    "false": "does not prepend a space before displaying the text",
                    "null/def/undefined": "prepends a psace before displaying the text"
                }
            }]
        },
        "setDefaultFlip": {
            "alias": ["setDefFlip", "setDefaultFlip"],
            "name": "setDefaultFlip",
            "code": "setDefaultFlip(promise,time,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Animates the character back to its default flip status.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "flipVertically": {
            "alias": ["flipVertically"],
            "name": "flipVertically",
            "code": "flipVertically(promise,time,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Flips/mirror the character vertically. (up-down). This is relative to its current flip status.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "flipHorizontally": {
            "alias": ["flipHorizontally"],
            "name": "flipHorizontally",
            "code": "flipHorizontally(promise,time,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Flips/mirror the character vertically. (left-right). This is relative to its current flip status.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "scale": {
            "alias": ["scale"],
            "name": "scale",
            "code": "scale(scaleX,scaleY,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Scales the character by the given factor. Note that this is relative to the character's current size.",
            "arg": [{
                "name": "scaleX",
                "alias": ["scaleX", "w", "width", "x", "xScale"],
                "type": "+number",
                "desc": "The factor to scale horizontally (width) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original width of character",
                    "def": "1.2"
                }
            }, {
                "name": "scaleY",
                "alias": ["h", "height", "scaleY", "y", "yScale"],
                "type": "+number",
                "desc": "The factor to scale vertically (height) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original height of character",
                    "def": "1.2"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "move": {
            "alias": ["move"],
            "name": "move",
            "code": "move(x,y,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Move the character relative to current position horizontally by x (in terms of percentage of VN's screen width), and vertically by y (in terms of percentage of VN's screen height). Positive x will move the character to the right, negative x will move the character to the left. Positive y will move the character downwards, negative y will move the character upwards. ",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xPos"],
                "type": "number",
                "desc": "The amount to move the character horizontally by. This is in percentage of the VN screen width. Positive is to the right where as negative is to the left.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def/null/undefined": "Original x position of the character"
                }
            }, {
                "name": "y",
                "alias": ["top", "y", "yPos"],
                "type": "number",
                "desc": "The amount to move the character vertically by. This is in percentage of the VN screen height. Positive is downwards where as negative is upwards.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def/null/undefined": "Original y position of the character"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "jump": {
            "alias": ["jump"],
            "name": "jump",
            "code": "jump(x,y,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Move the character horizontally to x (in terms of percentage of VN's screen width) away from the origin, and vertically to y (in terms of percentage of VN's screen height) away from the origin. Positive x will move the character to the right of the origin, , negative x will move the character to the left of the origin. Positive y will move the character below the origin, negative y will move the character above the origin. ",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xOffset", "xPos"],
                "type": "number",
                "desc": "The horizontal (or x) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen width. Ie 5 is 5% of the VN Engine Screen width to the right, whereas -8.55 is -8.55% of the VN Engine Screen width to the left. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }, {
                "name": "y",
                "alias": ["top", "y", "yOffset", "yPos"],
                "type": "number",
                "desc": "The vertical (or y) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen height. Ie 5 is 5% of the VN Engine Screen height downwards, whereas -8.55 is -8.55% of the VN Engine Screen height upwards. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "disappear": {
            "alias": ["disappear"],
            "name": "disappear",
            "code": "disappear(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Fades the character out within the time limit. If time is 0, will instantly disappear. ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "appear": {
            "alias": ["appear"],
            "name": "appear",
            "code": "appear(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Fades the character in within the time limit. If time is 0, will instantly appear. ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "moveAnchorX": {
            "alias": ["moveAnchorX"],
            "name": "moveAnchorX",
            "code": "moveAnchorX(x,time,promise,graph,skip,adjust);",
            "single": false,
            "type": "Animation",
            "desc": "Changes the anchor X of the character. This will result in a movement in character, the movement will be done in the time given. If you do not want the movement cause by the anchor change, please put adjust to true, the engine will then change the anchor of the character while trying to correct it offset such that the character will not move. ",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xOffset", "xPos"],
                "type": "number",
                "desc": "The horizontal (or x) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen width. Ie 5 is 5% of the VN Engine Screen width to the right, whereas -8.55 is -8.55% of the VN Engine Screen width to the left. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "adjust",
                "alias": ["adjust"],
                "type": "boolean",
                "desc": "Whether to adjust the offset of the character so that the character will not move. This is true by default.",
                "accepted": {
                    "true": "engine would auto offset the character such that the character on screen will not move ",
                    "false": "engine would animate the character to the new position due to the change in anchor or alignment",
                    "def/null/undefined": "true"
                }
            }]
        },
        "moveAnchorY": {
            "alias": ["moveAnchorY"],
            "name": "moveAnchorY",
            "code": "moveAnchorY(y,time,promise,graph,skip,adjust);",
            "single": false,
            "type": "Animation",
            "desc": "Changes the anchor Y of the character. This will result in a movement in character, the movement will be done in the time given. If you do not want the movement cause by the anchor change, please put adjust to true, the engine will then change the anchor of the character while trying to correct it offset such that the character will not move. ",
            "arg": [{
                "name": "y",
                "alias": ["top", "y", "yOffset", "yPos"],
                "type": "number",
                "desc": "The vertical (or y) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen height. Ie 5 is 5% of the VN Engine Screen height downwards, whereas -8.55 is -8.55% of the VN Engine Screen height upwards. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "adjust",
                "alias": ["adjust"],
                "type": "boolean",
                "desc": "Whether to adjust the offset of the character so that the character will not move. This is true by default.",
                "accepted": {
                    "true": "engine would auto offset the character such that the character on screen will not move ",
                    "false": "engine would animate the character to the new position due to the change in anchor or alignment",
                    "def/null/undefined": "true"
                }
            }]
        },
        "moveVerticalAlign": {
            "alias": ["moveVerticalAlign"],
            "name": "moveVerticalAlign",
            "code": "moveVerticalAlign(y,time,promise,graph,skip,adjust);",
            "single": false,
            "type": "Animation",
            "desc": "Changes the vertical alignment or yAlign of the character. This will result in a movement in character, the movement will be done in the time given. If you do not want the movement cause by the alignment change, please put adjust to true, the engine will then change the alignment of the character while trying to correct it offset such that the character will not move. ",
            "arg": [{
                "name": "y",
                "alias": ["top", "y", "yOffset", "yPos"],
                "type": "number",
                "desc": "The vertical (or y) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen height. Ie 5 is 5% of the VN Engine Screen height downwards, whereas -8.55 is -8.55% of the VN Engine Screen height upwards. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "adjust",
                "alias": ["adjust"],
                "type": "boolean",
                "desc": "Whether to adjust the offset of the character so that the character will not move. This is true by default.",
                "accepted": {
                    "true": "engine would auto offset the character such that the character on screen will not move ",
                    "false": "engine would animate the character to the new position due to the change in anchor or alignment",
                    "def/null/undefined": "true"
                }
            }]
        },
        "moveHorizontalAlign": {
            "alias": ["moveHorizontalAlign"],
            "name": "moveHorizontalAlign",
            "code": "moveHorizontalAlign(x,time,promise,graph,skip,adjust);",
            "single": false,
            "type": "Animation",
            "desc": "Changes the horizontal alignment or x Align of the character. This will result in a movement in character, the movement will be done in the time given. If you do not want the movement cause by the alignment change, please put adjust to true, the engine will then change the alignment of the character while trying to correct it offset such that the character will not move. ",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xOffset", "xPos"],
                "type": "number",
                "desc": "The horizontal (or x) offset of the character.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen width. Ie 5 is 5% of the VN Engine Screen width to the right, whereas -8.55 is -8.55% of the VN Engine Screen width to the left. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": 0
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "adjust",
                "alias": ["adjust"],
                "type": "boolean",
                "desc": "Whether to adjust the offset of the character so that the character will not move. This is true by default.",
                "accepted": {
                    "true": "engine would auto offset the character such that the character on screen will not move ",
                    "false": "engine would animate the character to the new position due to the change in anchor or alignment",
                    "def/null/undefined": "true"
                }
            }]
        },
        "blur": {
            "alias": ["blur"],
            "name": "blur",
            "code": "blur(blur,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Blurs the charcater in the given time",
            "arg": [{
                "name": "blur",
                "alias": ["blur", "f", "filter"],
                "type": "float",
                "desc": "How blur the character is, where at 0 the character is clear and 1 is very blur. You can exceed the value 1 but its is not recommended",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "invert": {
            "alias": ["invert"],
            "name": "invert",
            "code": "invert(invert,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Inverts or negate the color of the charcater in the given time",
            "arg": [{
                "name": "invert",
                "alias": ["f", "filter", "invert", "negative"],
                "type": "float",
                "desc": "How negative the character color is, where 0 is no negative filter and 1 iis when the character is compeletely inverted. At 0.5, the character will be completely grey.",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "grayscale": {
            "alias": ["grayscale"],
            "name": "grayscale",
            "code": "grayscale(grayscale,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Grayscales the color of the character (make it close to black and white) in the given time",
            "arg": [{
                "name": "grayscale",
                "alias": ["filter", "gray", "grayscale"],
                "type": "float",
                "desc": "How close to black and white (grayscale) the character is. 1 is fully gray-scaled.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "sepia": {
            "alias": ["sepia"],
            "name": "sepia",
            "code": "sepia(sepia,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Sepia the color of the charcater in the given time",
            "arg": [{
                "name": "sepia",
                "alias": ["f", "filter", "sepia"],
                "type": "float",
                "desc": "How sepia the character is, where 0 is no sepia filter and 1 is maximum sepia filter",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "contrast": {
            "alias": ["contrast"],
            "name": "contrast",
            "code": "contrast(contrast,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Adjust the contrast of the character in the given time",
            "arg": [{
                "name": "contrast",
                "alias": ["contrast", "f", "filter"],
                "type": "float",
                "desc": "How much contrast to apply to the character is, where 1 is normal, values between 0-1 will decrease contrast while values above 1 will increase the contrast",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "saturate": {
            "alias": ["saturate"],
            "name": "saturate",
            "code": "saturate(saturation,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Saturate the color of the character in the given time",
            "arg": [{
                "name": "saturation",
                "alias": ["f", "filter", "saturate", "saturation"],
                "type": "float",
                "desc": "How saturated the character is, where 1 is no saturation. Sub 1 is undersaturation and values above one will increase the saturation.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "brightness": {
            "alias": ["brightness"],
            "name": "brightness",
            "code": "brightness(brightness,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Brighten or darken the character in the given time",
            "arg": [{
                "name": "brightness",
                "alias": ["bright", "brightness", "f", "filter"],
                "type": "float",
                "desc": "How bright the character is, where 1 is the normal brightness. Sub 1 is darken the character and values above one will increase the character brightness.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "rotateHue": {
            "alias": ["rotateHue"],
            "name": "rotateHue",
            "code": "rotateHue(angle,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Rotate the hue of the character in the given time",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "f", "filter", "rotate", "rotation"],
                "type": "degree",
                "desc": "Hue rotation of the character is.",
                "accepted": {
                    "degree": "Any degree between 0-360. Larger or smaller values will loop back.",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "rotateClockwise": {
            "alias": ["rotateClockwise"],
            "name": "rotateClockwise",
            "code": "rotateClockwise(angle,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Rotate the character clockwise by the given degree in the given time",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the character clockwise in degrees. Only positive numbers",
                "accepted": {
                    "degree": "Any number between 0-360. Larger values will loop back.",
                    "null/undefined": "Rotates the character back to normal.",
                    "def": "45"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "rotateAntiClockwise": {
            "alias": ["rotateAntiClockwise"],
            "name": "rotateAntiClockwise",
            "code": "rotateAntiClockwise(angle,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Rotate the character anti-clockwise by the given degree in the given time",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the character anti-clockwise in degrees. Only positive numbers",
                "accepted": {
                    "degree": "Any number between 0-360. Larger values will loop back.",
                    "null/undefined": "Rotates the character back to normal.",
                    "def": "45"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "skew": {
            "alias": ["skew"],
            "name": "skew",
            "code": "skew(xSkew,ySkew,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Skew the character in the given time",
            "arg": [{
                "name": "xSkew",
                "alias": ["angleX", "skewX", "x", "xSkew"],
                "type": "degree",
                "desc": "How many degrees the character is skewed horizontally",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Unskews the character back to normal.",
                    "def": "45"
                }
            }, {
                "name": "ySkew",
                "alias": ["angleY", "skewY", "y", "ySkew"],
                "type": "degree",
                "desc": "How many degrees the character is skewed vertically",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Unskews the character back to normal.",
                    "def": "45"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "wait": {
            "alias": ["wait"],
            "name": "wait",
            "code": "wait(time,promise,skip);",
            "single": false,
            "type": "Animation",
            "desc": "The character does nothing till the time is up, then the promise is fulfilled. ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "animate": {
            "alias": ["animate"],
            "name": "animate",
            "code": "animate(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "The character will animate from its screen values to whatever values it has. This method is a one-size-fit-all method for animating. Use setters, pre-animations and chain constructors to change the value (they do not directly apply to the character on screen), and call this function to transform this character to whatever new values is! ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "resetAll": {
            "alias": ["resetAll"],
            "name": "resetAll",
            "code": "resetAll(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "This will reset the character to its default state (all values), and animate it to that state. See character-defaults. ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "triggered": {
            "alias": ["trigger", "triggered"],
            "name": "triggered",
            "code": "triggered(time,promise,skip,shake,delay);",
            "single": false,
            "type": "Frills",
            "desc": "Shakes the character, as if he/she/it is triggered. ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "shake",
                "alias": ["shake"],
                "type": "+number",
                "desc": "The percentage of the character to shake by. 1 would be 1% of the character's width and height, and 0.5 would be 0.5% of the character's width and height. ",
                "accepted": {
                    "number": "Any non-zero positive float or integer",
                    "null/def/undefined": "shake the character by 0.5%"
                }
            }, {
                "name": "delay",
                "alias": ["delay"],
                "type": "!0+int",
                "desc": "Shaking can be seen as a frame of shifting the character. The delay is the time between each change in position. Default value is 25 (undefined/null/def).",
                "accepted": {
                    "number": "time in milliseconds. Only non-zero positive integers",
                    "null/def/undefined": "25"
                }
            }]
        },
        "glitch": {
            "alias": ["glitch"],
            "name": "glitch",
            "code": "glitch(spriteName);",
            "single": true,
            "type": "Frills",
            "desc": "Glitches the character constantly, the character will constantly glitch until .fix() is called. You may make the glitchs have a different sprite, if not stated, the sprite will always change with the character sprite, else, the glitch will always have the specified sprite. ",
            "arg": [{
                "name": "spriteName",
                "alias": ["name", "spriteName"],
                "type": "string",
                "desc": "The name of the sprite.",
                "accepted": {
                    "string": "Any string. Preferable without spaces or special character. Eg: sad, smile_speak"
                }
            }]
        },
        "endSpeak": {
            "alias": ["endSpeak"],
            "name": "endSpeak",
            "code": "endSpeak(promise,time,graph,skip);",
            "single": false,
            "type": "Frills",
            "desc": "Reverts the character back to normal size after preSpeak is used.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "The amount of time in milliseconds the character take to scale when using the preSpeak method.",
                "accepted": {
                    "number": "Any non negative integer. Zero would make it instant. Eg: 100 (0.1s), 2000 (2s)",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "200"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "preSpeak": {
            "alias": ["preSpeak"],
            "name": "preSpeak",
            "code": "preSpeak(promise,scale,time,graph,skip);",
            "single": false,
            "type": "Frills",
            "desc": "Scales the character and brings the character to front. Commonly used before speaking",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "scale",
                "alias": ["scale"],
                "type": "+number",
                "desc": "The factor to scale by before the character speaks using the preSpeak method.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1.05"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "The amount of time in milliseconds the character take to scale when using the preSpeak method.",
                "accepted": {
                    "number": "Any non negative integer. Zero would make it instant. Eg: 100 (0.1s), 2000 (2s)",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "200"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "interupt": {
            "alias": ["interrupt", "interupt"],
            "name": "interupt",
            "code": "interupt(promise,scale,time,graph,skip);",
            "single": false,
            "type": "Frills",
            "desc": "Prespeaks and interrupt the previous character while talking",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "scale",
                "alias": ["scale"],
                "type": "+number",
                "desc": "The factor to scale by before the character speaks using the preSpeak method.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "1.05"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "The amount of time in milliseconds the character take to scale when using the preSpeak method.",
                "accepted": {
                    "number": "Any non negative integer. Zero would make it instant. Eg: 100 (0.1s), 2000 (2s)",
                    "null/undefined": "Reset this value to prior to .complete() call for the character. See character-defaults",
                    "def": "200"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "fix": {
            "alias": ["fix"],
            "name": "fix",
            "code": "fix();",
            "single": false,
            "type": "Frills",
            "desc": "Fixes the character if its glitching",
            "arg": []
        },
        "cycle": {
            "alias": ["cycle"],
            "name": "cycle",
            "code": "cycle(promise);",
            "single": false,
            "type": "Others",
            "desc": "Starts a cycle. This allows you to make animations that ignores frame-design, and cycles till the stop cycle is called.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "endOfCycle": {
            "alias": ["endOfCycle"],
            "name": "endOfCycle",
            "code": "endOfCycle();",
            "single": false,
            "type": "Others",
            "desc": "Marks the end of a cycle sequence and to start from the start.",
            "arg": []
        },
        "stopCycle": {
            "alias": ["stopCycle"],
            "name": "stopCycle",
            "code": "stopCycle(time,promise,graph,skip);",
            "single": false,
            "type": "Others",
            "desc": "Stops the character if its in a cycle sequence",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "500"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The character default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The character default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "waitFor": {
            "alias": ["waitFor"],
            "name": "waitFor",
            "code": "waitFor(gameInstant,promise);",
            "single": true,
            "type": "Others",
            "desc": "Make this thread wait until another thread notifies this thread.",
            "arg": [{
                "name": "gameInstant",
                "alias": ["background", "bg", "char", "character", "gameInstant", "instance"],
                "type": "game-instance",
                "desc": "Stage or Character",
                "accepted": {
                    "stage": "Fully constructed Stage Object",
                    "character": "Fully constructed Character Object"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "notifyWaiter": {
            "alias": ["notify", "notifyWaiter"],
            "name": "notifyWaiter",
            "code": "notifyWaiter(gameInstant);",
            "single": true,
            "type": "Others",
            "desc": "Notify the a thread that may be waiting for this thread.",
            "arg": [{
                "name": "gameInstant",
                "alias": ["background", "bg", "char", "character", "gameInstant", "instance"],
                "type": "game-instance",
                "desc": "Stage or Character",
                "accepted": {
                    "stage": "Fully constructed Stage Object",
                    "character": "Fully constructed Character Object"
                }
            }]
        }
    },
    "bg": {
        "resetValues": {
            "alias": ["resetValues"],
            "name": "resetValues",
            "code": "resetValues();",
            "single": false,
            "type": "Setter",
            "desc": "Animate the background to the state prior to .complete() call.",
            "arg": []
        },
        "setCustomDirectory": {
            "alias": ["setCustomDirectory", "setDir"],
            "name": "setCustomDirectory",
            "code": "setCustomDirectory(directory);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the default background image directory to a custom one. (Primary for CDN and URL uses).",
            "arg": [{
                "name": "directory",
                "alias": ["dir", "directory"],
                "type": "URL",
                "desc": "Directory which contains the background for this stage. Can be online URL.",
                "accepted": {
                    "string": "directory to point to",
                    "def/null/undefined": "bkgd folder in images in kvn folder"
                }
            }]
        },
        "setDefaultSkippable": {
            "alias": ["setDefSkip", "setDefaultSkippable"],
            "name": "setDefaultSkippable",
            "code": "setDefaultSkippable(skip);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Boolean value. Changes whether stage animation can be skipped by default (when animation does not specify the animation skip-ability).",
            "arg": [{
                "name": "skip",
                "alias": ["skip"],
                "type": "boolean",
                "desc": "By default, whether the background's animations can be skipped (if the skip argument is not supplied)",
                "accepted": {
                    "true": "Backgrounds's animation can be skipped unless specified at animation level. This does not affect for \"wait\" method",
                    "false": "Backgrounds's animations cannot be skipped unless the specified at animation level.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "Makes the background animation skip-able unless specified at animation level"
                }
            }]
        },
        "setDefaultAnimateInterpolation": {
            "alias": ["setDefGraph", "setDefaultAnimateInterpolation"],
            "name": "setDefaultAnimateInterpolation",
            "code": "setDefaultAnimateInterpolation(graph);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "The default animation interpolation graph (easing) the stage uses for all its animation if the animation did not specify.",
            "arg": [{
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }]
        },
        "addBackground": {
            "alias": ["addBG", "addBackground", "addBg", "addBkgd"],
            "name": "addBackground",
            "code": "addBackground(spriteName,backgroundPath);",
            "single": false,
            "type": "Chain Constructor",
            "desc": "Adds a background to the stage. The background will be refered to via the name when changing backgrounds.",
            "arg": [{
                "name": "spriteName",
                "alias": ["background", "bg", "name", "spriteName"],
                "type": "string",
                "desc": "The name of the sprite.",
                "accepted": {
                    "string": "Any string. Preferable without spaces or special character. Eg: sad, smile_speak"
                }
            }, {
                "name": "backgroundPath",
                "alias": ["backgroundPath", "path"],
                "type": "URL",
                "desc": "The path to the background (image). Do include file extension. The default image folder is \"images/bkgd\". background links can include relative resource locations. ",
                "accepted": {
                    "string": "Any legit URL that points to an image within the folder (or preset directory). Eg: chinatown.png, temple/raining.png"
                }
            }]
        },
        "setOpacity": {
            "alias": ["setOpacity"],
            "name": "setOpacity",
            "code": "setOpacity(opacity);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the opacity of the background",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setCoverOpacity": {
            "alias": ["setCoverOpacity"],
            "name": "setCoverOpacity",
            "code": "setCoverOpacity(opacity);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the opacity of the cover layer",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setBackdropOpacity": {
            "alias": ["setBackdropOpacity"],
            "name": "setBackdropOpacity",
            "code": "setBackdropOpacity(opacity);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the opacity of the backdrop layer",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setOverlayOpacity": {
            "alias": ["setOverlayOpacity"],
            "name": "setOverlayOpacity",
            "code": "setOverlayOpacity(opacity);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the opacity of the overlay layer",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setCoverColor": {
            "alias": ["setCoverColor"],
            "name": "setCoverColor",
            "code": "setCoverColor(color);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the color of the cover layer",
            "arg": [{
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Color of this layer. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }]
        },
        "setBackdropColor": {
            "alias": ["setBackdropColor"],
            "name": "setBackdropColor",
            "code": "setBackdropColor(color);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the color of the backdrop layer",
            "arg": [{
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Color of this layer. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }]
        },
        "setOverlayColor": {
            "alias": ["setOverlayColor"],
            "name": "setOverlayColor",
            "code": "setOverlayColor(color);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the color of the overlay layer",
            "arg": [{
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Color of this layer. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }]
        },
        "setInvert": {
            "alias": ["setInvert"],
            "name": "setInvert",
            "code": "setInvert(invert);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets how negative or inverted the color of the background is",
            "arg": [{
                "name": "invert",
                "alias": ["f", "filter", "invert", "negative"],
                "type": "float",
                "desc": "How negative the Background color is, where 0 is no negative filter and 1 iis when the Background is compeletely inverted. At 0.5, the Background will be completely grey.",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setBlur": {
            "alias": ["setBlur"],
            "name": "setBlur",
            "code": "setBlur(blur);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the blurness of the background",
            "arg": [{
                "name": "blur",
                "alias": ["blur", "f", "filter"],
                "type": "float",
                "desc": "How blur the Background is, where at 0 the Background is clear and 1 is very blur. You can exceed the value 1 but its is not recommended",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setGrayscale": {
            "alias": ["setGrayscale"],
            "name": "setGrayscale",
            "code": "setGrayscale(grayscale);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the color of background closeness to grayscale (black/white)",
            "arg": [{
                "name": "grayscale",
                "alias": ["filter", "gray", "grayscale"],
                "type": "float",
                "desc": "How close to black and white (grayscale) the Background is. 1 is fully gray-scaled.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setSepia": {
            "alias": ["setSepia"],
            "name": "setSepia",
            "code": "setSepia(sepia);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the sepia filter on the background",
            "arg": [{
                "name": "sepia",
                "alias": ["f", "filter", "sepia"],
                "type": "float",
                "desc": "How sepia the background is, where 0 is no sepia filter and 1 is maximum sepia filter",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setContrast": {
            "alias": ["setContrast"],
            "name": "setContrast",
            "code": "setContrast(contrast);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the contrast of the background",
            "arg": [{
                "name": "contrast",
                "alias": ["contrast", "f", "filter"],
                "type": "float",
                "desc": "How much contrast to apply to the Background is, where 1 is normal, values between 0-1 will decrease contrast while values above 1 will increase the contrast",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }]
        },
        "setSaturation": {
            "alias": ["setSaturation"],
            "name": "setSaturation",
            "code": "setSaturation(saturation);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the color saturation of the background",
            "arg": [{
                "name": "saturation",
                "alias": ["f", "filter", "saturate", "saturation"],
                "type": "float",
                "desc": "How saturated the Background is, where 1 is no saturation. Sub 1 is undersaturation and values above one will increase the saturation.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }]
        },
        "setBrightness": {
            "alias": ["setBrightness"],
            "name": "setBrightness",
            "code": "setBrightness(brightness);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the brightness of the background",
            "arg": [{
                "name": "brightness",
                "alias": ["bright", "brightness", "f", "filter"],
                "type": "float",
                "desc": "How bright the Background is, where 1 is the normal brightness. Sub 1 is darken the Background and values above one will increase the Background brightness.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }]
        },
        "setHueRotation": {
            "alias": ["setHueRotation"],
            "name": "setHueRotation",
            "code": "setHueRotation(angle);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the hue of background by rotate it ",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "f", "filter", "rotate", "rotation"],
                "type": "degree",
                "desc": "Hue rotation of the Background is.",
                "accepted": {
                    "degree": "Any degree between 0-360. Larger or smaller values will loop back.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setRotation": {
            "alias": ["setRotation"],
            "name": "setRotation",
            "code": "setRotation(angle);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the rotation of the background",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the Background clockwise in degrees",
                "accepted": {
                    "degree": "Any number between 0-360. Larger or smaller values will loop back.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setXSkew": {
            "alias": ["setXSkew"],
            "name": "setXSkew",
            "code": "setXSkew(xSkew);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust the horizontal skew applied to the background.",
            "arg": [{
                "name": "xSkew",
                "alias": ["angleX", "skewX", "x", "xSkew"],
                "type": "degree",
                "desc": "How many degrees the Background is skewed horizontally",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setYSkew": {
            "alias": ["setYSkew"],
            "name": "setYSkew",
            "code": "setYSkew(ySkew);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Adjust he vertical skew applied to the background.",
            "arg": [{
                "name": "ySkew",
                "alias": ["angleY", "skewY", "y", "ySkew"],
                "type": "degree",
                "desc": "How many degrees the Background is skewed vertically",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setXOffSet": {
            "alias": ["setX", "setXOffSet"],
            "name": "setXOffSet",
            "code": "setXOffSet(x);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the background's horizontal offset",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xOffset", "xPos"],
                "type": "number",
                "desc": "The horizontal (or x) offset of the background.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen width. Ie 5 is 5% of the VN Engine Screen width to the right, whereas -8.55 is -8.55% of the VN Engine Screen width to the left. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": 0
                }
            }]
        },
        "setYOffSet": {
            "alias": ["setY", "setYOffSet"],
            "name": "setYOffSet",
            "code": "setYOffSet(y);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the background's vertical offset.",
            "arg": [{
                "name": "y",
                "alias": ["top", "y", "yOffset", "yPos"],
                "type": "number",
                "desc": "The vertical (or y) offset of the Background.",
                "accepted": {
                    "number": "Any real number. It is in percentage of VN Engine's screen height. Ie 5 is 5% of the VN Engine Screen height downwards, whereas -8.55 is -8.55% of the VN Engine Screen height upwards. ",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": 0
                }
            }]
        },
        "setHorizontalFlip": {
            "alias": ["setHFlip", "setHorizontalFlip", "setXFlip"],
            "name": "setHorizontalFlip",
            "code": "setHorizontalFlip(hflip);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the background's horizontal flip status.",
            "arg": [{
                "name": "hflip",
                "alias": ["hflip", "horizontalFlip"],
                "type": "boolean",
                "desc": "Whether the background is flipped horizontally (along the y axis, on the x axis)",
                "accepted": {
                    "true": "The background is flipped horizontally",
                    "false": "The Background is not flipped horizontally",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "The Background is not flipped horizontally"
                }
            }]
        },
        "setVerticalFlip": {
            "alias": ["setVFlip", "setVerticalFlip", "setYFlip"],
            "name": "setVerticalFlip",
            "code": "setVerticalFlip(vflip);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the background's vertical flip status",
            "arg": [{
                "name": "vflip",
                "alias": ["verticalFlip", "vflip"],
                "type": "boolean",
                "desc": "Whether the Background is flipped vertically (along the x axis, on the y axis)",
                "accepted": {
                    "true": "The Background is flipped vertically",
                    "false": "The Background is not flipped vertically",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "The Background is not flipped vertically"
                }
            }]
        },
        "setWidth": {
            "alias": ["setWidth"],
            "name": "setWidth",
            "code": "setWidth(width);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the background's width. This is relative to the VN Screen Width*",
            "arg": [{
                "name": "width",
                "alias": ["w", "width"],
                "type": "!0+number",
                "desc": "The width the Background. This is in percentage of the screen width*.",
                "accepted": {
                    "number": "Non-negative, non-zero number. Eg: 5, 75.5",
                    "null/undefined/def": "Reset this value to prior to .complete() call for the background. See background-defaults"
                }
            }]
        },
        "setHeight": {
            "alias": ["setHeight"],
            "name": "setHeight",
            "code": "setHeight(height);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Sets the background's height. This is relative to the VN Screen Height* ",
            "arg": [{
                "name": "height",
                "alias": ["h", "height"],
                "type": "!0+number",
                "desc": "The height the Background. This is in percentage of the screen height*.",
                "accepted": {
                    "number": "Non-negative, non-zero number. Eg: 5, 75.5",
                    "null/undefined/def": "Reset this value to prior to .complete() call for the background. See background-defaults"
                }
            }]
        },
        "setAnchorX": {
            "alias": ["setAX", "setAnchorX"],
            "name": "setAnchorX",
            "code": "setAnchorX(anchorX);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the horizontal (or X) anchor of the background.",
            "arg": [{
                "name": "anchorX",
                "alias": ["aX", "anchorX", "originX", "x", "xOrigin"],
                "type": "number",
                "desc": "The X or Horizontal Anchor of the Background. See alignment and anchoring.",
                "accepted": {
                    "number": "Any number between 0 and 100, where 0 will be the extreme left and 100 will be the extreme right. 50 would be the horizontal center of the Background.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "setAnchorY": {
            "alias": ["setAY", "setAnchorY"],
            "name": "setAnchorY",
            "code": "setAnchorY(anchorY);",
            "single": true,
            "type": "Chain Constructor",
            "desc": "Changes the vertical (or Y) anchor of the background.",
            "arg": [{
                "name": "anchorY",
                "alias": ["aY", "anchorY", "originY", "y", "yOrigin"],
                "type": "number",
                "desc": "The Y or Vertical Anchor of the Background. See alignment and anchoring.",
                "accepted": {
                    "number": "Any number between 0 and 100, where 0 will be the extreme top and 100 will be the extreme bottom. 50 would be the vertical center of the Background.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }]
        },
        "complete": {
            "alias": ["complete"],
            "name": "complete",
            "code": "complete();",
            "single": false,
            "type": "Chain Constructor",
            "desc": "Marks the completion of the stage during construction. All values set by chain constructors, setters or pre-anim prior to this method call will be set as the stage's default values. When calling settings and animations, if the parameter is undefined or null, it will assume to animate to/set to these default values",
            "arg": []
        },
        "preScale": {
            "alias": ["preScale"],
            "name": "preScale",
            "code": "preScale(scaleX,scaleY);",
            "single": false,
            "type": "Pre Animations",
            "desc": "Scales the background but does not animate it, yet. Values will be applied on next animation.",
            "arg": [{
                "name": "scaleX",
                "alias": ["scaleX", "w", "width", "x", "xScale"],
                "type": "+number",
                "desc": "The factor to scale horizontally (width) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original width of Background",
                    "def": "1.2"
                }
            }, {
                "name": "scaleY",
                "alias": ["h", "height", "scaleY", "y", "yScale"],
                "type": "+number",
                "desc": "The factor to scale vertically (height) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original height of Background",
                    "def": "1.2"
                }
            }]
        },
        "preMove": {
            "alias": ["preMove"],
            "name": "preMove",
            "code": "preMove(x,y);",
            "single": false,
            "type": "Pre Animations",
            "desc": "Moves the background but does not animate it yet. Values will be applied on next animation.",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xPos"],
                "type": "number",
                "desc": "The amount to shift the Background horizontally by. This is in percentage of the VN screen width. Positive is to the right where as negative is to the left.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def": "0",
                    "null/undefined": "Original x position of the Background"
                }
            }, {
                "name": "y",
                "alias": ["top", "y", "yPos"],
                "type": "number",
                "desc": "The amount to move the Background vertically by. This is in percentage of the VN screen height. Positive is downwards where as negative is upwards.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def": "0",
                    "null/undefined": "Original y position of the Background"
                }
            }]
        },
        "preRotate": {
            "alias": ["preRotate"],
            "name": "preRotate",
            "code": "preRotate(angle);",
            "single": true,
            "type": "Pre Animations",
            "desc": "Rotate the background from the current position but does not animate it yet. Values will be applied on next animation.",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the Background clockwise in degrees. Only positive numbers",
                "accepted": {
                    "degree": "Any number between 0-360. Larger values will loop back.",
                    "def/null/undefined": "Rotates the Background back to normal."
                }
            }]
        },
        "preSkew": {
            "alias": ["preSkew"],
            "name": "preSkew",
            "code": "preSkew(xSkew,ySkew);",
            "single": false,
            "type": "Pre Animations",
            "desc": "Skew background from the current position but does not animate it yet. Values will be applied on next animation.",
            "arg": [{
                "name": "xSkew",
                "alias": ["angleX", "skewX", "x", "xSkew"],
                "type": "degree",
                "desc": "How many degrees the Background is skewed horizontally",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "def/null/undefined": "Unskews the Background back to normal."
                }
            }, {
                "name": "ySkew",
                "alias": ["angleY", "skewY", "y", "ySkew"],
                "type": "degree",
                "desc": "How many degrees the Background is skewed vertically",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "def/null/undefined": "Unskews the Background back to normal."
                }
            }]
        },
        "fadeInBackground": {
            "alias": ["appear", "fadeIn", "fadeInBackground"],
            "name": "fadeInBackground",
            "code": "fadeInBackground(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Fades in the background in the given time. (Change background layer opacity to 1)",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "fadeOutBackground": {
            "alias": ["disappear", "fadeOut", "fadeOutBackground"],
            "name": "fadeOutBackground",
            "code": "fadeOutBackground(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Fades out the background in the given time. (Change background layer opacity to 0)",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "displayText": {
            "alias": ["displayText"],
            "name": "displayText",
            "code": "displayText(text,time,promise,name,centered,fontSize,color,bold,italic,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Displays a text on the text box. It can has various customizable settings for the text and their position. Do note that this will clear whatever text there are in the current textbox (if it is completed displaying) and be ignored if the current textbox is still animating its text. ",
            "arg": [{
                "name": "text",
                "alias": ["msg", "text"],
                "type": "string",
                "desc": "The text to display on the textbox.",
                "accepted": {
                    "string": "Any valid string. Do note that if it is too long it will clip out of the text box"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "Time taken for the text to be displayed in milliseconds. If this number is too low, it will revert to 10ms between each character.",
                "accepted": {
                    "number": "Any non-zero positive integer. This is the number of milliseconds.",
                    "def": "1000",
                    "null/undefined": "each character will appear every 20 milliseconds (normal scrolling speed)"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "name",
                "alias": ["name"],
                "type": "string",
                "desc": "Name of to be displayed as speaking",
                "accepted": {
                    "string": "Any string to be displayed as name. Eg: John Smith, Kami-sama",
                    "none": "Will not display the name box",
                    "def": "Will not display the name box",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input"
                }
            }, {
                "name": "centered",
                "alias": ["center", "centered"],
                "type": "boolean",
                "desc": "Whether the text is centered or top left",
                "accepted": {
                    "true": "Text will be center of text box",
                    "false": "Text will be top left of the text box",
                    "def": "Text will be top left of the text box",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input"
                }
            }, {
                "name": "fontSize",
                "alias": ["fontSize", "fs", "size", "textSize"],
                "type": "font-size",
                "desc": "The font size when the used when the stage displays text.",
                "accepted": {
                    "html units": "Any number with a html unit. Eg: 1.5vw, 20px, 5vh, 7%, 8.33em.",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "1.5vw"
                }
            }, {
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Background's text/font color. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }, {
                "name": "bold",
                "alias": ["bold"],
                "type": "boolean",
                "desc": "Whether the background's text will be bold.",
                "accepted": {
                    "true": "Background text will be bold",
                    "false": "Background text will not be bold",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "false"
                }
            }, {
                "name": "italic",
                "alias": ["italic"],
                "type": "boolean",
                "desc": "Whether the background's text will be italic.",
                "accepted": {
                    "true": "Background text will be italic",
                    "false": "Background text will not be italic",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "false"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "fadeInText": {
            "alias": ["fadeInText"],
            "name": "fadeInText",
            "code": "fadeInText(text,time,promise,name,centered,fontSize,color,bold,italic,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Fades in the text instead of type writing it Do note that this will clear whatever text there are in the current textbox (if it is completed displaying) and be ignored if the current textbox is still animating its text. ",
            "arg": [{
                "name": "text",
                "alias": ["msg", "text"],
                "type": "string",
                "desc": "The text to display on the textbox.",
                "accepted": {
                    "string": "Any valid string. Do note that if it is too long it will clip out of the text box"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "name",
                "alias": ["name"],
                "type": "string",
                "desc": "Name of to be displayed as speaking",
                "accepted": {
                    "string": "Any string to be displayed as name. Eg: John Smith, Kami-sama",
                    "none": "Will not display the name box",
                    "def": "Will not display the name box",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input"
                }
            }, {
                "name": "centered",
                "alias": ["center", "centered"],
                "type": "boolean",
                "desc": "Whether the text is centered or top left",
                "accepted": {
                    "true": "Text will be center of text box",
                    "false": "Text will be top left of the text box",
                    "def": "Text will be top left of the text box",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input"
                }
            }, {
                "name": "fontSize",
                "alias": ["fontSize", "fs", "size", "textSize"],
                "type": "font-size",
                "desc": "The font size when the used when the stage displays text.",
                "accepted": {
                    "html units": "Any number with a html unit. Eg: 1.5vw, 20px, 5vh, 7%, 8.33em.",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "1.5vw"
                }
            }, {
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Background's text/font color. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }, {
                "name": "bold",
                "alias": ["bold"],
                "type": "boolean",
                "desc": "Whether the background's text will be bold.",
                "accepted": {
                    "true": "Background text will be bold",
                    "false": "Background text will not be bold",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "false"
                }
            }, {
                "name": "italic",
                "alias": ["italic"],
                "type": "boolean",
                "desc": "Whether the background's text will be italic.",
                "accepted": {
                    "true": "Background text will be italic",
                    "false": "Background text will not be italic",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "false"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "wait": {
            "alias": ["wait"],
            "name": "wait",
            "code": "wait(time,promise,skip);",
            "single": false,
            "type": "Animation",
            "desc": "The stage does nothing till the time is up, then the promise is fulfilled. ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "changeCover": {
            "alias": ["changeCover"],
            "name": "changeCover",
            "code": "changeCover(opacity,color,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Change the cover's opacity and color to the parameter inputs in the time given",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }, {
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Color of this layer. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "changeBackdrop": {
            "alias": ["changeBackdrop"],
            "name": "changeBackdrop",
            "code": "changeBackdrop(opacity,color,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Change the backdrop's opacity and color to the parameter inputs in the time given",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }, {
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Color of this layer. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "changeOverlay": {
            "alias": ["changeOverlay"],
            "name": "changeOverlay",
            "code": "changeOverlay(opacity,color,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Change the overlay's opacity and color to the parameter inputs in the time given",
            "arg": [{
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }, {
                "name": "color",
                "alias": ["color", "colour", "yanse"],
                "type": "color",
                "desc": "Color of this layer. ",
                "accepted": {
                    "6-hex": "6 Digit hexidecimal Color code. Example: #00FF00",
                    "3-hex": "3 Digit hexidecimal Color code. Example: #FA3",
                    "RGBA": "RedGreenBlueAlpha values between 0-255. Eg: rgba(0,0,254,0.5)",
                    "HTML presets": "List of HTML preset colors. Eg: black, green, blue, red, yellow, aqua",
                    "null/undefined": "It will use the value used in the previous time the method is called for this specific stage with the specific \"centered\" setting. If the stage has never called this method, it will automatically use \"def\" as input",
                    "def": "black"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "changeBackground": {
            "alias": ["changeBackground"],
            "name": "changeBackground",
            "code": "changeBackground(spriteName,opacity,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Fades the current background out and fades in the new background to the specified opacity in the given time",
            "arg": [{
                "name": "spriteName",
                "alias": ["background", "bg", "name", "spriteName"],
                "type": "string",
                "desc": "The name of the sprite.",
                "accepted": {
                    "string": "Any string. Preferable without spaces or special character. Eg: sad, smile_speak"
                }
            }, {
                "name": "opacity",
                "alias": ["a", "alpha", "o", "opacity"],
                "type": "float",
                "desc": "Opacity of this layer.",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundBlur": {
            "alias": ["backgroundBlur", "blur", "blurBackground"],
            "name": "backgroundBlur",
            "code": "backgroundBlur(blur,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Blurs the background to the set value in the time given.",
            "arg": [{
                "name": "blur",
                "alias": ["blur", "f", "filter"],
                "type": "float",
                "desc": "How blur the Background is, where at 0 the Background is clear and 1 is very blur. You can exceed the value 1 but its is not recommended",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundInvert": {
            "alias": ["backgroundInvert", "invert", "invertBackground"],
            "name": "backgroundInvert",
            "code": "backgroundInvert(invert,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Inverts the color of background to the set value in the time given. ",
            "arg": [{
                "name": "invert",
                "alias": ["f", "filter", "invert", "negative"],
                "type": "float",
                "desc": "How negative the Background color is, where 0 is no negative filter and 1 iis when the Background is compeletely inverted. At 0.5, the Background will be completely grey.",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundGrayscale": {
            "alias": ["backgroundGrayscale", "grayscale", "grayscaleBackground"],
            "name": "backgroundGrayscale",
            "code": "backgroundGrayscale(grayscale,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Adjust the color of the background to grayscale in the time given",
            "arg": [{
                "name": "grayscale",
                "alias": ["filter", "gray", "grayscale"],
                "type": "float",
                "desc": "How close to black and white (grayscale) the Background is. 1 is fully gray-scaled.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 1",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundSepia": {
            "alias": ["backgroundSepia", "sepia", "sepiaBackground"],
            "name": "backgroundSepia",
            "code": "backgroundSepia(sepia,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Adjust the color of the background to sepia in the time given",
            "arg": [{
                "name": "sepia",
                "alias": ["f", "filter", "sepia"],
                "type": "float",
                "desc": "How sepia the background is, where 0 is no sepia filter and 1 is maximum sepia filter",
                "accepted": {
                    "number": "Any floating point between 0 and 1. Eg: 0.5, 0, 0.224",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundContrast": {
            "alias": ["backgroundContrast", "contrast", "contrastBackground"],
            "name": "backgroundContrast",
            "code": "backgroundContrast(contrast,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Adjust the contrast of the background in the time given",
            "arg": [{
                "name": "contrast",
                "alias": ["contrast", "f", "filter"],
                "type": "float",
                "desc": "How much contrast to apply to the Background is, where 1 is normal, values between 0-1 will decrease contrast while values above 1 will increase the contrast",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundSaturate": {
            "alias": ["backgroundSaturate", "saturate", "saturateBackground"],
            "name": "backgroundSaturate",
            "code": "backgroundSaturate(saturation,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Adjust the color saturation of the background in the time given",
            "arg": [{
                "name": "saturation",
                "alias": ["f", "filter", "saturate", "saturation"],
                "type": "float",
                "desc": "How saturated the Background is, where 1 is no saturation. Sub 1 is undersaturation and values above one will increase the saturation.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundBrightness": {
            "alias": ["backgroundBrightness", "brightness", "brightnessBackground"],
            "name": "backgroundBrightness",
            "code": "backgroundBrightness(brightness,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Adjust the brightness of the background in the time given",
            "arg": [{
                "name": "brightness",
                "alias": ["bright", "brightness", "f", "filter"],
                "type": "float",
                "desc": "How bright the Background is, where 1 is the normal brightness. Sub 1 is darken the Background and values above one will increase the Background brightness.",
                "accepted": {
                    "number": "Any floating point above 0. Eg: 0.5, 0, 0.224, 3.6",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "backgroundRotateHue": {
            "alias": ["backgroundRotateHue", "rotateHue", "rotateHueBackground"],
            "name": "backgroundRotateHue",
            "code": "backgroundRotateHue(angle,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Adjust hue of the background by rotating it in the given time",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "f", "filter", "rotate", "rotation"],
                "type": "degree",
                "desc": "Hue rotation of the Background is.",
                "accepted": {
                    "degree": "Any degree between 0-360. Larger or smaller values will loop back.",
                    "null/undefined": "Reset this value to prior to .complete() call for the background. See background-defaults",
                    "def": "0"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "rotateBackgroundClockwise": {
            "alias": ["rotateBackgroundClockwise", "rotateClockwise"],
            "name": "rotateBackgroundClockwise",
            "code": "rotateBackgroundClockwise(angle,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Rotate the background clockwise by the given degree in the given time",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the Background clockwise in degrees. Only positive numbers",
                "accepted": {
                    "degree": "Any number between 0-360. Larger values will loop back.",
                    "def/null/undefined": "Rotates the Background back to normal."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "rotateBackgroundAntiClockwise": {
            "alias": ["rotateAntiClockwise", "rotateBackgroundAntiClockwise"],
            "name": "rotateBackgroundAntiClockwise",
            "code": "rotateBackgroundAntiClockwise(angle,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Rotate the background anti-clockwise by the given degree in the given time",
            "arg": [{
                "name": "angle",
                "alias": ["angle", "degree", "rotate", "rotation"],
                "type": "degree",
                "desc": "Rotation of the Background anti-clockwise in degrees. Only positive numbers",
                "accepted": {
                    "degree": "Any number between 0-360. Larger values will loop back.",
                    "def/null/undefined": "Rotates the Background back to normal."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "pan": {
            "alias": ["pan"],
            "name": "pan",
            "code": "pan(x,y,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Move the background relative to current position horizontally by x amount (relative to VN Screen width) and vertically by y amount (relative to VN screen Height). ",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xPos"],
                "type": "number",
                "desc": "The amount to shift the Background horizontally by. This is in percentage of the VN screen width. Positive is to the right where as negative is to the left.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def": "0",
                    "null/undefined": "Original x position of the Background"
                }
            }, {
                "name": "y",
                "alias": ["top", "y", "yPos"],
                "type": "number",
                "desc": "The amount to move the Background vertically by. This is in percentage of the VN screen height. Positive is downwards where as negative is upwards.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def": "0",
                    "null/undefined": "Original y position of the Background"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "shiftBackground": {
            "alias": ["jump", "shift", "shiftBackground"],
            "name": "shiftBackground",
            "code": "shiftBackground(x,y,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Move the background from the original position horizontally by x amount (relative to VN Screen width) and vertically by y amount (relative to VN screen Height).",
            "arg": [{
                "name": "x",
                "alias": ["left", "x", "xPos"],
                "type": "number",
                "desc": "The amount to shift the Background horizontally by. This is in percentage of the VN screen width. Positive is to the right where as negative is to the left.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def": "0",
                    "null/undefined": "Original x position of the Background"
                }
            }, {
                "name": "y",
                "alias": ["top", "y", "yPos"],
                "type": "number",
                "desc": "The amount to move the Background vertically by. This is in percentage of the VN screen height. Positive is downwards where as negative is upwards.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "def": "0",
                    "null/undefined": "Original y position of the Background"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "scaleBackground": {
            "alias": ["scale", "scaleBackground"],
            "name": "scaleBackground",
            "code": "scaleBackground(scaleX,scaleY,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Scale the background base on the current background width and height by the given factor in the given time",
            "arg": [{
                "name": "scaleX",
                "alias": ["scaleX", "w", "width", "x", "xScale"],
                "type": "+number",
                "desc": "The factor to scale horizontally (width) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original width of Background",
                    "def": "1.2"
                }
            }, {
                "name": "scaleY",
                "alias": ["h", "height", "scaleY", "y", "yScale"],
                "type": "+number",
                "desc": "The factor to scale vertically (height) by.",
                "accepted": {
                    "number": "Any positive number. Eg: 1.5, 0.2,1.05 ,3",
                    "null/undefined": "Original height of Background",
                    "def": "1.2"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "skewBackground": {
            "alias": ["skew", "skewBackground"],
            "name": "skewBackground",
            "code": "skewBackground(xSkew,ySkew,time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Skew the character in the given time",
            "arg": [{
                "name": "xSkew",
                "alias": ["angleX", "skewX", "x", "xSkew"],
                "type": "degree",
                "desc": "How many degrees the Background is skewed horizontally",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "def/null/undefined": "Unskews the Background back to normal."
                }
            }, {
                "name": "ySkew",
                "alias": ["angleY", "skewY", "y", "ySkew"],
                "type": "degree",
                "desc": "How many degrees the Background is skewed vertically",
                "accepted": {
                    "degree": "Any number between 0-180. Larger numbers will flip the image and smaller numbers will skew in the opposite direction.",
                    "def/null/undefined": "Unskews the Background back to normal."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "flipBackgroundVertically": {
            "alias": ["flipBackgroundVertically", "flipVertically"],
            "name": "flipBackgroundVertically",
            "code": "flipBackgroundVertically(promise,time,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Flips/mirror the background vertically. (up-down). This is relative to its current flip status.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "flipBackgroundHorizontally": {
            "alias": ["flipBackgroundHorizontally", "flipHorizontally"],
            "name": "flipBackgroundHorizontally",
            "code": "flipBackgroundHorizontally(promise,time,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "Flips/mirror the background vertically. (left-right). This is relative to its current flip status.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "animate": {
            "alias": ["animate"],
            "name": "animate",
            "code": "animate(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "The background will animate from its screen values to whatever values it has. This method is a one-size-fit-all method for animating. Use setters, pre-animations and chain constructors to change the value (they do not directly apply to the background on screen), and call this function to transform this background to whatever new values is! ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "resetStage": {
            "alias": ["resetStage"],
            "name": "resetStage",
            "code": "resetStage(time,promise,graph,skip);",
            "single": false,
            "type": "Animation",
            "desc": "This will reset the background to its default state (all values), and animate it to that state. See background-defaults. ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "closeTextBox": {
            "alias": ["closeTextBox"],
            "name": "closeTextBox",
            "code": "closeTextBox(promise);",
            "single": false,
            "type": "Instants",
            "desc": "Closes the text box instantly",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "displayOption": {
            "alias": ["displayOption"],
            "name": "displayOption",
            "code": "displayOption(options,promise);",
            "single": true,
            "type": "Instants",
            "desc": "Display Options in the option array",
            "arg": [{
                "name": "options",
                "alias": ["option", "optionArr", "optionArray", "options"],
                "type": "array",
                "desc": "Array of option object",
                "accepted": {
                    "Array": "Array of fully constructed Options Object"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "displayOptionPrecise": {
            "alias": ["displayOptionPrecise"],
            "name": "displayOptionPrecise",
            "code": "displayOptionPrecise(options,fontSize,width,padding,margin,column,promise);",
            "single": false,
            "type": "Instants",
            "desc": "Display with precise requirement, grid wise, with predefined columns and margin etc",
            "arg": [{
                "name": "options",
                "alias": ["option", "optionArr", "optionArray", "options"],
                "type": "array",
                "desc": "Array of option object",
                "accepted": {
                    "Array": "Array of fully constructed Options Object"
                }
            }, {
                "name": "fontSize",
                "alias": ["fontSize", "size", "textSize"],
                "type": "!0+number",
                "desc": "The font size of the text in the option box. This only allows non-zero positive number as input",
                "accepted": {
                    "number": "Non zero positive number as input. Eg: 2, 1.5, 0.6,5.55",
                    "null/def/undefined": "2.5"
                }
            }, {
                "name": "width",
                "alias": ["w", "width"],
                "type": "!0+number",
                "desc": "The width of the option in percentage of the VN screen width",
                "accepted": {
                    "number": "Any non-zero positive number",
                    "null/undefined/def": "20"
                }
            }, {
                "name": "padding",
                "alias": ["pad", "padding"],
                "type": "+number",
                "desc": "The padding of the option box. ",
                "accepted": {
                    "number": "Positive number as input. Eg: 2, 1.5, 0.6,5.55",
                    "null/def/undefined": "1"
                }
            }, {
                "name": "margin",
                "alias": ["mar", "margin"],
                "type": "+number",
                "desc": "The margin of the option box. ",
                "accepted": {
                    "number": "Positive number as input. Eg: 2, 1.5, 0.6,5.55",
                    "null/def/undefined": "1"
                }
            }, {
                "name": "column",
                "alias": ["col", "column"],
                "type": "!0+int",
                "desc": "Number of columns to display the options in",
                "accepted": {
                    "number": "Positive interger only. Eg: 1, 3, 6",
                    "null/def/undefined": "1"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "setOption": {
            "alias": ["setOption"],
            "name": "setOption",
            "code": "setOption(options,x,y,width,width,padding);",
            "single": false,
            "type": "Setter",
            "desc": "Pre-set a option at a precise location, to be displayed when displayOption method is called.",
            "arg": [{
                "name": "options",
                "alias": ["option", "optionArr", "optionArray", "options"],
                "type": "array",
                "desc": "Array of option object",
                "accepted": {
                    "Array": "Array of fully constructed Options Object"
                }
            }, {
                "name": "x",
                "alias": ["x"],
                "type": "number",
                "desc": "The x position of the option in percentage of the VN screen Width",
                "accepted": {
                    "number": "Any valid number",
                    "null/undefined/def": "0"
                }
            }, {
                "name": "y",
                "alias": ["y"],
                "type": "number",
                "desc": "The y position of the option in percentage of the VN screen Height",
                "accepted": {
                    "number": "Any valid number",
                    "null/undefined/def": "0"
                }
            }, {
                "name": "width",
                "alias": ["w", "width"],
                "type": "!0+number",
                "desc": "The width of the option in percentage of the VN screen width",
                "accepted": {
                    "number": "Any non-zero positive number",
                    "null/undefined/def": "20"
                }
            }, {
                "name": "width",
                "alias": ["w", "width"],
                "type": "!0+number",
                "desc": "The width of the option in percentage of the VN screen width",
                "accepted": {
                    "number": "Any non-zero positive number",
                    "null/undefined/def": "20"
                }
            }, {
                "name": "padding",
                "alias": ["pad", "padding"],
                "type": "+number",
                "desc": "The padding of the option box. ",
                "accepted": {
                    "number": "Positive number as input. Eg: 2, 1.5, 0.6,5.55",
                    "null/def/undefined": "1"
                }
            }]
        },
        "displayMarker": {
            "alias": ["displayMarker"],
            "name": "displayMarker",
            "code": "displayMarker(promise);",
            "single": false,
            "type": "Instants",
            "desc": "Show a completion marker (green for frame ended, red for frame not ended).",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "removeMarker": {
            "alias": ["removeMarker"],
            "name": "removeMarker",
            "code": "removeMarker(promise);",
            "single": false,
            "type": "Instants",
            "desc": "Close the completion marker.",
            "arg": [{
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "glitch": {
            "alias": ["glitch"],
            "name": "glitch",
            "code": "glitch();",
            "single": false,
            "type": "Frills",
            "desc": "Glitches the background",
            "arg": []
        },
        "trigger": {
            "alias": ["trigger"],
            "name": "trigger",
            "code": "trigger(time,promise,skip,shake,delay);",
            "single": false,
            "type": "Frills",
            "desc": "Shakes the background",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "shake",
                "alias": ["shake"],
                "type": "+number",
                "desc": "The percentage of the background/stage to shake by. 1 would be 1% of the background's width and height, and 0.5 would be 0.5% of the background's width and height. ",
                "accepted": {
                    "number": "Any non-zero positive float or integer",
                    "null/def/undefined": "shake the background by 0.5%"
                }
            }, {
                "name": "delay",
                "alias": ["delay"],
                "type": "!0+int",
                "desc": "Shaking can be seen as a frame of shifting the background. The delay is the time between each change in position. Default value is 25 (undefined/null/def).",
                "accepted": {
                    "number": "time in milliseconds. Only non-zero positive integers",
                    "null/def/undefined": "25"
                }
            }]
        },
        "earthquake": {
            "alias": ["earthquake"],
            "name": "earthquake",
            "code": "earthquake(time,promise,skip,shake,delay);",
            "single": false,
            "type": "Frills",
            "desc": "Shakes the whole engine (textbox, character everything)",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "shake",
                "alias": ["shake"],
                "type": "+number",
                "desc": "The percentage of the background/stage to shake by. 1 would be 1% of the background's width and height, and 0.5 would be 0.5% of the background's width and height. ",
                "accepted": {
                    "number": "Any non-zero positive float or integer",
                    "null/def/undefined": "shake the background by 0.5%"
                }
            }, {
                "name": "delay",
                "alias": ["delay"],
                "type": "!0+int",
                "desc": "Shaking can be seen as a frame of shifting the background. The delay is the time between each change in position. Default value is 25 (undefined/null/def).",
                "accepted": {
                    "number": "time in milliseconds. Only non-zero positive integers",
                    "null/def/undefined": "25"
                }
            }]
        },
        "waitFor": {
            "alias": ["waitFor"],
            "name": "waitFor",
            "code": "waitFor(gameInstant,promise);",
            "single": true,
            "type": "Others",
            "desc": "Make this thread wait until another thread notifies this thread.",
            "arg": [{
                "name": "gameInstant",
                "alias": ["background", "bg", "char", "character", "gameInstant", "instance"],
                "type": "game-instance",
                "desc": "Stage or Character",
                "accepted": {
                    "stage": "Fully constructed Stage Object",
                    "character": "Fully constructed Character Object"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "notifyWaiter": {
            "alias": ["notify", "notifyWaiter"],
            "name": "notifyWaiter",
            "code": "notifyWaiter(gameInstant);",
            "single": true,
            "type": "Others",
            "desc": "Notify the a thread that may be waiting for this thread.",
            "arg": [{
                "name": "gameInstant",
                "alias": ["background", "bg", "char", "character", "gameInstant", "instance"],
                "type": "game-instance",
                "desc": "Stage or Character",
                "accepted": {
                    "stage": "Fully constructed Stage Object",
                    "character": "Fully constructed Character Object"
                }
            }]
        },
        "display": {
            "alias": ["display", "show"],
            "name": "display",
            "code": "display(bkgdAlpha,bkdpAlpha,time,promise,graph,skip);",
            "single": false,
            "type": "Globals",
            "desc": "Sets the current stage to active. If there is a previous stage, the previous stage's background, overlay and cover will fade out (within the first half of the time) and fade in the background to bkgdAlpha value and animate the backdrop's opacity to bkdpAlpha in the second half to the time. If there is not previous stage, the current background and backdrop will fade in to bkgdAlpha opacity and bkdpAlpha opacity respectively. ",
            "arg": [{
                "name": "bkgdAlpha",
                "alias": ["backgroundAlpha", "backgroundOpacity", "bgA", "bgO", "bkgdA", "bkgdAlpha", "bkgdO", "bkgdOpacity"],
                "type": "float",
                "desc": "Background Opacity to fade to. ",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "def/null/undefined": "1"
                }
            }, {
                "name": "bkdpAlpha",
                "alias": ["backdropAlpha", "backdropOpacity", "bdA", "bdO", "bkdpA", "bkdpAlpha", "bkdpO", "bkdpOpacity"],
                "type": "float",
                "desc": "Background Opacity to fade to. ",
                "accepted": {
                    "float": "decimals between 0 and 1 inclusive, where 0 is completely transparent and 1 is completely opaque. Eg: 0.5, 0.66, 1",
                    "def/null/undefined": "1"
                }
            }, {
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }]
        },
        "unDisplay": {
            "alias": ["hide", "unDisplay"],
            "name": "unDisplay",
            "code": "unDisplay(time,promise,graph,skip,offBackdrop);",
            "single": false,
            "type": "Globals",
            "desc": "Remove the current stage as the active stage. Fade the background out. Put last parameter to true if you want the backdrop to fadeout too. This will automatically fade overlay and cover out ",
            "arg": [{
                "name": "time",
                "alias": ["t", "time"],
                "type": "+int",
                "desc": "How much time to complete the animation or instant in milliseconds. 0 will make it animate to it end-state instantly ",
                "accepted": {
                    "number": "Positive integers in milliseconds.",
                    "null/undefined": "0",
                    "def": "1000"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }, {
                "name": "graph",
                "alias": ["g", "graph"],
                "type": "animation-graph",
                "desc": "The animation interpolation type",
                "accepted": {
                    "linear": "normal",
                    "swing": "slow-fast-slow",
                    "easeIn": "slow->fast",
                    "easeOut": "fast->slow",
                    "easeBack": "fast till exceed -> slowly go back to correct position",
                    "elastic": "rubberband effect",
                    "bounce": "like ball bouncing",
                    "slowMotion": "slow motion effect",
                    "stepped": "Not continous, jagged. Stepped function",
                    "rough": "random sharp jumps",
                    "null/undefined": "The stage default animation-interpolation policy. To change check the method setDefaultAnimationInterpolation",
                    "def": "swing"
                }
            }, {
                "name": "skip",
                "alias": ["s", "skip"],
                "type": "boolean",
                "desc": "Whether this animation can be skipped by clicking",
                "accepted": {
                    "true": "This animation can be skipped by clicking",
                    "false": "This animation cannot be skipped by clicking",
                    "null/undefined": "The stage default policy regarding animation skip-ablity. To change check the method setDefaultSkippable."
                }
            }, {
                "name": "offBackdrop",
                "alias": ["off", "offBackdrop"],
                "type": "boolean",
                "desc": "Whether to fadeout the backdrop when undisplaying stage",
                "accepted": {
                    "true": "Fadeout backdrop",
                    "false": "Don't fadeout backdrop",
                    "def/null/undefined": "Don't fadeout backdrop"
                }
            }]
        },
        "bringCharacter": {
            "alias": ["bring", "bringCharacter"],
            "name": "bringCharacter",
            "code": "bringCharacter(character,promise);",
            "single": true,
            "type": "Globals",
            "desc": "Brings the character onto the stage. If the stage is not active (. display() is not called yet), nothing happens on screen, and the character is added to the stage (the character will be animate-able once .display() is called). If it is called while the stage is active, the character will be instantly brought to the screen with all its values applied. If this character belongs to another stage prior to this, it is automatically removed from the stage ",
            "arg": [{
                "name": "character",
                "alias": ["c", "char", "character"],
                "type": "character",
                "desc": "Characters game objects",
                "accepted": {
                    "character": "Fully constructed Character objects"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "removeCharacter": {
            "alias": ["remove", "removeCharacter"],
            "name": "removeCharacter",
            "code": "removeCharacter(character,promise);",
            "single": true,
            "type": "Globals",
            "desc": "Removes the character from the stage. If the stage is not active (. display() is not called yet), nothing happens on the screen, which the character is removed from stage (when .displayed() is called, you cannot make the character appear because its not on the stage). If it is called while the stage is active, the character will be instantly removed from the screen. ",
            "arg": [{
                "name": "character",
                "alias": ["c", "char", "character"],
                "type": "character",
                "desc": "Characters game objects",
                "accepted": {
                    "character": "Fully constructed Character objects"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        }
    },
    "con": {
        "character": {
            "alias": ["character"],
            "name": "character",
            "code": "Character(name,image,width,height,xOffSet,yOffSet,horizontalAlignment,verticalAlignment);",
            "single": false,
            "type": "Constructor",
            "desc": "Creates a Character Object",
            "arg": [{
                "name": "name",
                "alias": ["n", "name"],
                "type": "string",
                "desc": "The name of the character when he/she speaks",
                "accepted": {
                    "string": "Any string. Eg: John, Mother, Kami-sama"
                }
            }, {
                "name": "image",
                "alias": ["defImage", "defSprite", "image", "sprite"],
                "type": "URL",
                "desc": "Link to the default sprite the character is rendered with. This is anaimage link to the folder kvn/images/char/ folder by default",
                "accepted": {
                    "string": "The relative link to the image. Eg: sophie.png, chelsea/cry.jpg"
                }
            }, {
                "name": "width",
                "alias": ["w", "width"],
                "type": "!0+number",
                "desc": "The width of the character in terms of percentage of the VN's screen's width*",
                "accepted": {
                    "number": "Non 0 positive number. Eg: 1, 12, 55.5, 7+8 , 6*7.7"
                }
            }, {
                "name": "height",
                "alias": ["h", "height"],
                "type": "!0+number",
                "desc": "The height of the character in terms of percentage of the VN's screen's width*",
                "accepted": {
                    "number": "Non 0 positive number. Eg: 1, 12, 55.5, 7+8 , 6*7.7"
                }
            }, {
                "name": "xOffSet",
                "alias": ["left", "x", "xOffSet", "xOffset"],
                "type": "number",
                "desc": "The horizontal distance the character will be at from the alignment of the character in terms of percentage of the VN's screen width.",
                "accepted": {
                    "number": "Any float or integer"
                }
            }, {
                "name": "yOffSet",
                "alias": ["top", "y", "yOffSet", "yOffset"],
                "type": "number",
                "desc": "The vertical distance the character will be at from the alignment of the character in terms of percentage of the VN's screen height.",
                "accepted": {
                    "number": "Any float or integer"
                }
            }, {
                "name": "horizontalAlignment",
                "alias": ["aX", "hAlign", "horizontalAlignment", "xAlign"],
                "type": "number",
                "desc": "This is BOTH the anchor x of the character AND the character's hozizontal aligment to the screen.",
                "accepted": {
                    "number": "Any float or integer"
                }
            }, {
                "name": "verticalAlignment",
                "alias": ["aY", "vAlign", "verticalAlignment", "yAlign"],
                "type": "number",
                "desc": "This is BOTH the anchor y of the character AND the character's vertical aligment to the screen.",
                "accepted": {
                    "number": "Any float or integer"
                }
            }]
        },
        "stage": {
            "alias": ["stage"],
            "name": "stage",
            "code": "Stage(image);",
            "single": true,
            "type": "Constructor",
            "desc": "Creates a Stage Object",
            "arg": [{
                "name": "image",
                "alias": ["background", "bg", "bkgd", "defImage", "defSprite", "image", "sprite"],
                "type": "URL",
                "desc": "Link to the default background image the stage is rendered with. This is an image link to the folder kvn/images/bkgd/ folder by default",
                "accepted": {
                    "string": "The relative link to the image. Eg: town.png, chinatown/rain.jpg"
                }
            }]
        },
        "option": {
            "alias": ["option"],
            "name": "option",
            "code": "Options(text,id,promise);",
            "single": false,
            "type": "Constructor",
            "desc": "Creates a Option Object",
            "arg": [{
                "name": "text",
                "alias": ["msg", "option", "text"],
                "type": "string",
                "desc": "The text that is displayed as the option.",
                "accepted": {
                    "string": "Any string"
                }
            }, {
                "name": "id",
                "alias": ["id"],
                "type": "unique-string",
                "desc": "The ID of the object. This string has to be unique, no 2 objects can have the same ID",
                "accepted": {
                    "unique-string": "any string that has not been used before"
                }
            }, {
                "name": "promise",
                "alias": ["promise"],
                "type": "promise",
                "desc": "A promise to be fulfilled. This is a function, when this animation or instant ends (whether skipped or not), the promise will be executed.",
                "accepted": {
                    "function": "a full defined javacsript function. This can be other animations, setters or anything at all.",
                    "null/undefined": "Ends the animation thread. When all animation thread ends in aframe, the frame will be considered to have ended."
                }
            }]
        },
        "sound": {
            "alias": ["sound"],
            "name": "sound",
            "code": "GameSound(soundgroup,source,loop);",
            "single": false,
            "type": "Constructor",
            "desc": "Creates a Sound Object",
            "arg": [{
                "name": "soundgroup",
                "alias": ["soundgroup"],
                "type": "sound-group",
                "desc": "The master sound group which this sound belongs to, when the volume of this sound group changes, all the sound belonging to this sound group will change relatively. ",
                "accepted": {
                    "VN": "Visual Novel sounds, including visual novel background music",
                    "BGM": "Clicker Background music",
                    "SFX": "Sound effects for clicker"
                }
            }, {
                "name": "source",
                "alias": ["source"],
                "type": "URL",
                "desc": "Source of the sound. Recommended to use mp3 to fit all browsers. Note that is has to be under /sounds folder ",
                "accepted": {
                    "string": "Relative link to sound/music files. Eg:background.mp3, title.wav, kimi.flac"
                }
            }, {
                "name": "loop",
                "alias": ["loop"],
                "type": "boolean",
                "desc": "Whether the sound will loop after it has ended",
                "accepted": {
                    "true": "Sound automatically loops after ended",
                    "false": "Sound stops playing once it reaches the end of its playback",
                    "null/undefined": "Sound will stop playing once it reaches the end of its playback"
                }
            }]
        }
    }
}
